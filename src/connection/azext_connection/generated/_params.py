# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import resource_group_name_type
from azext_connection.action import (
    AddSecretAuthInfo,
    AddUserAssignedIdentityAuthInfo,
    AddSystemAssignedIdentityAuthInfo,
    AddServicePrincipalAuthInfo
)
from ._validators import validate_source_resource, validate_target_resource


def load_arguments(self, _):

    with self.argument_context('connection list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.extra('webapp', type=str, help='The name of webapp service.', validator=validate_source_resource)
        c.ignore('source_provider')
        c.ignore('source_resource_type')
        c.ignore('source_resource_name')

    with self.argument_context('connection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.extra('webapp', type=str, help='The name of webapp service.', validator=validate_source_resource)
        c.ignore('source_provider')
        c.ignore('source_resource_type')
        c.ignore('source_resource_name')
        c.argument('linker_name', options_list=['--name', '-n', '--connection-name'], type=str, help='The name connection '
                   'resource.', id_part='child_name_1')

    with self.argument_context('connection create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.extra('webapp', type=str, help='The name of webapp service.', validator=validate_source_resource)
        c.extra('target_resource_group_name', options_list=['-tg', '--target-resource-group-name'], type=str,
                help='The resource group name of target resource.')
        c.extra('postgres', type=str, help='The name of postgres service.')
        c.extra('database', type=str, help='The name of database.')
        c.ignore('source_provider')
        c.ignore('source_resource_type')
        c.ignore('source_resource_name')
        c.argument('target_id', type=str, help='The resource Id of target service.', validator=validate_target_resource)
        c.argument('secret_auth_info', options_list=['--secret-auth'], action=AddSecretAuthInfo, nargs='+', help='The authentication info when '
                   'authType is secret', arg_group='AuthInfo')
        c.argument('user_assigned_identity_auth_info', action=AddUserAssignedIdentityAuthInfo, nargs='+', help='The '
                   'authentication info when authType is userAssignedIdentity', arg_group='AuthInfo')
        c.argument('system_assigned_identity_auth_info', action=AddSystemAssignedIdentityAuthInfo, nargs='+',
                   help='The authentication info when authType is systemAssignedIdentity Expect value: KEY1=VALUE1 '
                   'KEY2=VALUE2 ...', arg_group='AuthInfo')
        c.argument('service_principal_auth_info', action=AddServicePrincipalAuthInfo, nargs='+', help='The '
                   'authentication info when authType is servicePrincipal', arg_group='AuthInfo')
        c.argument('linker_name', options_list=['--name', '-n', '--connection-name'], type=str, help='The name of connection '
                   'resource.', required=False)

    with self.argument_context('connection update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.extra('webapp', type=str, help='The name of webapp service.', validator=validate_source_resource)
        c.extra('target_resource_group_name', options_list=['-tg', '--target-resource-group-name'], type=str,
                help='The resource group name of target resource.')
        c.extra('postgres', type=str, help='The name of postgres service.')
        c.extra('database', type=str, help='The name of database.')
        c.ignore('source_provider')
        c.ignore('source_resource_type')
        c.ignore('source_resource_name')
        c.argument('target_id', type=str, help='The resource Id of target service.', validator=validate_target_resource)
        c.argument('linker_name', options_list=['--name', '-n', '--connection-name'], type=str, help='The name Linker '
                   'resource.', id_part='child_name_1')
        c.argument('secret_auth_info', options_list=['--secret-auth'], action=AddSecretAuthInfo, nargs='+', help='The authentication info when '
                   'authType is secret', arg_group='AuthInfo')
        c.argument('user_assigned_identity_auth_info', action=AddUserAssignedIdentityAuthInfo, nargs='+', help='The '
                   'authentication info when authType is userAssignedIdentity', arg_group='AuthInfo')
        c.argument('system_assigned_identity_auth_info', action=AddSystemAssignedIdentityAuthInfo, nargs='+',
                   help='The authentication info when authType is systemAssignedIdentity Expect value: KEY1=VALUE1 '
                   'KEY2=VALUE2 ...', arg_group='AuthInfo')
        c.argument('service_principal_auth_info', action=AddServicePrincipalAuthInfo, nargs='+', help='The '
                   'authentication info when authType is servicePrincipal', arg_group='AuthInfo')

    with self.argument_context('connection delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.extra('webapp', type=str, help='The name of webapp service.', validator=validate_source_resource)
        c.ignore('source_provider')
        c.ignore('source_resource_type')
        c.ignore('source_resource_name')
        c.argument('linker_name', options_list=['--name', '-n', '--connection-name'], type=str, help='The name connection '
                   'resource.', id_part='child_name_1')

    with self.argument_context('connection list-configuration') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('linker_name', options_list=['--name', '-n', '--connection-name'], type=str, help='The name connection '
                   'resource.')
        c.extra('webapp', type=str, help='The name of webapp service.', validator=validate_source_resource)
        c.ignore('source_provider')
        c.ignore('source_resource_type')
        c.ignore('source_resource_name')

    with self.argument_context('connection validate') as c:
        c.argument('linker_name', options_list=['--name', '-n', '--connection-name'], type=str, help='The name connection '
                   'resource.', id_part='child_name_1')
        c.argument('resource_group_name', resource_group_name_type)
        c.extra('webapp', type=str, help='The name of webapp service.', validator=validate_source_resource)
        c.ignore('source_provider')
        c.ignore('source_resource_type')
        c.ignore('source_resource_name')

    with self.argument_context('connection wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.extra('webapp', type=str, help='The name of webapp service.', validator=validate_source_resource)
        c.ignore('source_provider')
        c.ignore('source_resource_type')
        c.ignore('source_resource_name')
        c.argument('linker_name', options_list=['--name', '-n', '--connection-name'], type=str, help='The name connection '
                   'resource.', id_part='child_name_1')
