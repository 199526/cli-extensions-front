# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.util import CLIError
from azure.cli.core.util import sdk_no_wait


def connection_linker_list(client,
                           resource_group_name,
                           source_provider,
                           source_resource_type,
                           source_resource_name):
    return client.list(resource_group_name=resource_group_name,
                       source_provider=source_provider,
                       source_resource_type=source_resource_type,
                       source_resource_name=source_resource_name)


def connection_linker_show(client,
                           resource_group_name,
                           source_provider,
                           source_resource_type,
                           source_resource_name,
                           linker_name):
    return client.get(resource_group_name=resource_group_name,
                      source_provider=source_provider,
                      source_resource_type=source_resource_type,
                      source_resource_name=source_resource_name,
                      linker_name=linker_name)


def connection_linker_create(client,
                             resource_group_name,
                             source_provider,
                             source_resource_type,
                             source_resource_name,
                             linker_name,
                             target_id=None,
                             secret_auth_info=None,
                             user_assigned_identity_auth_info=None,
                             system_assigned_identity_auth_info=None,
                             service_principal_auth_info=None,
                             no_wait=False):
    all_auth_info = []
    if secret_auth_info is not None:
        all_auth_info.append(secret_auth_info)
    if user_assigned_identity_auth_info is not None:
        all_auth_info.append(user_assigned_identity_auth_info)
    if system_assigned_identity_auth_info is not None:
        all_auth_info.append(system_assigned_identity_auth_info)
    if service_principal_auth_info is not None:
        all_auth_info.append(service_principal_auth_info)
    if len(all_auth_info) > 1:
        raise CLIError('at most one of  secret_auth_info, user_assigned_identity_auth_info, '
                       'system_assigned_identity_auth_info, service_principal_auth_info is needed for auth_info!')
    auth_info = all_auth_info[0] if len(all_auth_info) == 1 else None
    parameters = {}
    parameters['target_id'] = target_id
    parameters['auth_info'] = auth_info
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       source_provider=source_provider,
                       source_resource_type=source_resource_type,
                       source_resource_name=source_resource_name,
                       linker_name=linker_name,
                       parameters=parameters)


def connection_linker_update(client,
                             resource_group_name,
                             source_provider,
                             source_resource_type,
                             source_resource_name,
                             linker_name,
                             target_id=None,
                             secret_auth_info=None,
                             user_assigned_identity_auth_info=None,
                             system_assigned_identity_auth_info=None,
                             service_principal_auth_info=None,
                             no_wait=False):
    all_auth_info = []
    if secret_auth_info is not None:
        all_auth_info.append(secret_auth_info)
    if user_assigned_identity_auth_info is not None:
        all_auth_info.append(user_assigned_identity_auth_info)
    if system_assigned_identity_auth_info is not None:
        all_auth_info.append(system_assigned_identity_auth_info)
    if service_principal_auth_info is not None:
        all_auth_info.append(service_principal_auth_info)
    if len(all_auth_info) > 1:
        raise CLIError('at most one of  secret_auth_info, user_assigned_identity_auth_info, '
                       'system_assigned_identity_auth_info, service_principal_auth_info is needed for auth_info!')
    auth_info = all_auth_info[0] if len(all_auth_info) == 1 else None
    parameters = {}
    parameters['target_id'] = target_id
    parameters['auth_info'] = auth_info
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       source_provider=source_provider,
                       source_resource_type=source_resource_type,
                       source_resource_name=source_resource_name,
                       linker_name=linker_name,
                       parameters=parameters)


def connection_linker_delete(client,
                             resource_group_name,
                             source_provider,
                             source_resource_type,
                             source_resource_name,
                             linker_name):
    return client.delete(resource_group_name=resource_group_name,
                         source_provider=source_provider,
                         source_resource_type=source_resource_type,
                         source_resource_name=source_resource_name,
                         linker_name=linker_name)


def connection_linker_list_configuration(client,
                                         resource_group_name,
                                         linker_name,
                                         source_provider,
                                         source_resource_type,
                                         source_resource_name):
    return client.list_configurations(resource_group_name=resource_group_name,
                                      linker_name=linker_name,
                                      source_provider=source_provider,
                                      source_resource_type=source_resource_type,
                                      source_resource_name=source_resource_name)


def connection_linker_validate_linker(client,
                                      linker_name,
                                      resource_group_name,
                                      source_provider,
                                      source_resource_type,
                                      source_resource_name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_validate_linker,
                       linker_name=linker_name,
                       resource_group_name=resource_group_name,
                       source_provider=source_provider,
                       source_resource_type=source_resource_type,
                       source_resource_name=source_resource_name)
