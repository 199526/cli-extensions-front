# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait
from azure.cli.core.azclierror import (
    RequiredArgumentMissingError,
    ValidationError
)

err_msg = 'Required argument missing, please provide the prompt info or the arguments: {}'

def connection_list(client,
                source_resource_group=None,
                source_id=None,
                webapp=None,
                spring_cloud=None):
    if not source_id:
        raise RequiredArgumentMissingError(err_msg.format('--source-id'))
    return client.list(resource_uri=source_id)


def connection_show(client,
                connection_name=None,
                source_resource_group=None,
                source_id=None,
                id=None,
                webapp=None,
                spring_cloud=None):
    if not source_id or not connection_name:
        raise RequiredArgumentMissingError(err_msg.format('--source-id, --connection-name'))
    return client.get(resource_uri=source_id,
                      linker_name=connection_name)

def connection_delete(client,
                connection_name=None,
                source_resource_group=None,
                source_id=None,
                id=None,
                webapp=None,
                spring_cloud=None):
    if not source_id or not connection_name:
        raise RequiredArgumentMissingError(err_msg.format('--source-id, --connection-name'))
    return client.delete(resource_uri=source_id,
                         linker_name=connection_name)


def connection_list_configuration(client,
                connection_name=None,
                source_resource_group=None,
                source_id=None,
                id=None,
                webapp=None,
                spring_cloud=None):
    if not source_id or not connection_name:
        raise RequiredArgumentMissingError(err_msg.format('--source-id, --connection-name'))
    return client.list_configurations(resource_uri=source_id,
                                      linker_name=connection_name)


def connection_validate(client,
                connection_name=None,
                source_resource_group=None,
                source_id=None,
                id=None,
                webapp=None,
                spring_cloud=None,
                no_wait=False):
    if not source_id or not connection_name:
        raise RequiredArgumentMissingError(err_msg.format('--source-id, --connection-name'))
    return sdk_no_wait(no_wait,
                       client.validate_linker,
                       resource_uri=source_id,
                       linker_name=connection_name)

def connection_create(client,
                connection_name=None,
                source_resource_group=None,
                source_id=None,
                client_type=None,
                target_resource_group=None,
                target_id=None,
                secret_auth_info=None,
                user_assigned_identity_auth_info=None,
                system_assigned_identity_auth_info=None,
                service_principal_auth_info=None,
                no_wait=False,
                webapp=None,
                spring_cloud=None,
                postgres=None,
                database=None
                ):
    if not source_id or not connection_name or not target_id:
        raise RequiredArgumentMissingError(err_msg.format('--source-id, --connection-name', '--target-id'))
    
    all_auth_info = []
    if secret_auth_info is not None:
        all_auth_info.append(secret_auth_info)
    if user_assigned_identity_auth_info is not None:
        all_auth_info.append(user_assigned_identity_auth_info)
    if system_assigned_identity_auth_info is not None:
        all_auth_info.append(system_assigned_identity_auth_info)
    if service_principal_auth_info is not None:
        all_auth_info.append(service_principal_auth_info)
    if len(all_auth_info) > 1:
        raise ValidationError('at most one of  secret_auth_info, user_assigned_identity_auth_info, '
                       'system_assigned_identity_auth_info, service_principal_auth_info is needed for auth_info!')
    auth_info = all_auth_info[0] if len(all_auth_info) == 1 else None
    parameters = {}
    parameters['target_id'] = target_id
    parameters['auth_info'] = auth_info
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_uri=source_id,
                       linker_name=connection_name,
                       parameters=parameters)


def connection_update(client,
                source_resource_group=None,
                connection_name=None,
                id=None,
                client_type=None,
                secret_auth_info=None,
                user_assigned_identity_auth_info=None,
                system_assigned_identity_auth_info=None,
                service_principal_auth_info=None,
                no_wait=False,
                webapp=None,
                spring_cloud=None):
    
    if not source_id or not connection_name:
        raise RequiredArgumentMissingError(err_msg.format('--source-id, --connection-name'))

    all_auth_info = []
    if secret_auth_info is not None:
        all_auth_info.append(secret_auth_info)
    if user_assigned_identity_auth_info is not None:
        all_auth_info.append(user_assigned_identity_auth_info)
    if system_assigned_identity_auth_info is not None:
        all_auth_info.append(system_assigned_identity_auth_info)
    if service_principal_auth_info is not None:
        all_auth_info.append(service_principal_auth_info)
    if len(all_auth_info) > 1:
        raise ValidationError('at most one of  secret_auth_info, user_assigned_identity_auth_info, '
                       'system_assigned_identity_auth_info, service_principal_auth_info is needed for auth_info!')
    auth_info = all_auth_info[0] if len(all_auth_info) == 1 else None
    parameters = {}
    parameters['auth_info'] = auth_info
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_uri=source_id,
                       linker_name=connection_name,
                       parameters=parameters)